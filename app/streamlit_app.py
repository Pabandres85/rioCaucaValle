import streamlit as st
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
from sklearn.ensemble import RandomForestRegressor

st.set_page_config(page_title="Calidad del Agua - R√≠o Cauca en el Valle del Cauca", layout="wide")

# Estilos para ajustar im√°genes y gr√°ficos
st.markdown("""
    <style>
    img, .stImage > img {
        max-width: 720px;
        height: auto;
        border-radius: 10px;
        display: block;
        margin: auto;
    }
    .stPlotlyChart, .stAltairChart, .stPyplot {
        max-width: 720px !important;
        margin-left: auto !important;
        margin-right: auto !important;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üåä Calidad del Agua del R√≠o Cauca en el Valle del Cauca")

@st.cache_data
def load_data():
    df = pd.read_csv("data/cleaned/agua_rio_cauca_limpio.csv", parse_dates=["FECHA DE MUESTREO"])
    return df

df = load_data()
estaciones = sorted(df["ESTACIONES"].dropna().unique())
min_fecha = df["FECHA DE MUESTREO"].min().strftime("%Y-%m-%d")
max_fecha = df["FECHA DE MUESTREO"].max().strftime("%Y-%m-%d")

descripcion_parametros = {
    "pH": "Medida de acidez o alcalinidad del agua.",
    "TEMPERATURA (¬∞C)": "Temperatura del agua al momento del muestreo.",
    "TURBIEDAD (UNT)": "Cantidad de part√≠culas suspendidas que reducen la claridad.",
    "DEMANDA BIOQUIMICA DE OXIGENO (mg O2/l)": "Ox√≠geno necesario para descomponer materia org√°nica.",
    "DUREZA TOTAL (mg CaCO3/l)": "Concentraci√≥n de sales de calcio y magnesio.",
    "SOLIDOS DISUELTOS (mg SD/l)": "Cantidad total de s√≥lidos disueltos en el agua.",
    "COLOR (UPC)": "Presencia de compuestos que afectan el color.",
    "OXIGENO DISUELTO (mg O2/l)": "Ox√≠geno disponible en el agua para organismos vivos."
}

tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä Exploraci√≥n de Datos",
    "üß™ Comparaci√≥n entre Estaciones",
    "üîç Correlaciones",
    "ü§ñ Predicciones con IA",
    "üìò Informaci√≥n del Proyecto"
])

with tab1:
    st.header("üìä Exploraci√≥n de Datos")
    st.markdown(f"üìÜ **Rango de datos:** {min_fecha} ‚Üí {max_fecha}")
    selected_var = st.selectbox("Selecciona una variable:", df.select_dtypes("float").columns)
    selected_station = st.selectbox("Selecciona una estaci√≥n:", estaciones)
    df_filtered = df[df["ESTACIONES"] == selected_station].sort_values("FECHA DE MUESTREO")

    with st.container():
        fig, ax = plt.subplots(figsize=(7, 3))
        ax.plot(df_filtered["FECHA DE MUESTREO"], df_filtered[selected_var], marker="o")
        ax.set_title(f"Evoluci√≥n de {selected_var} en el tiempo", fontsize=12)
        ax.set_xlabel("Fecha")
        ax.set_ylabel(selected_var)
        ax.tick_params(axis='x', rotation=45)
        st.pyplot(fig)

    with st.expander("‚ÑπÔ∏è Descripci√≥n del par√°metro"):
        descripcion = descripcion_parametros.get(selected_var, "No se encontr√≥ descripci√≥n para este par√°metro.")
        st.markdown(f"üìò **Descripci√≥n de la variable {selected_var}:** {descripcion}")

with tab2:
    st.header("üß™ Comparaci√≥n entre Estaciones")
    selected_stations = st.multiselect("Selecciona hasta 3 estaciones:", estaciones, default=estaciones[:2])
    selected_param = st.selectbox("Selecciona el par√°metro a comparar:", df.select_dtypes("float").columns)

    if len(selected_stations) >= 1:
        df_comp = df[df["ESTACIONES"].isin(selected_stations)]
        fig, ax = plt.subplots(figsize=(7, 3))
        sns.boxplot(data=df_comp, x="ESTACIONES", y=selected_param, ax=ax)
        ax.set_title(f"{selected_param} por estaci√≥n", fontsize=12)
        ax.tick_params(axis='x', rotation=45)
        st.pyplot(fig)

with tab3:
    st.header("üîç Correlaci√≥n entre Par√°metros")
    df_corr = df.select_dtypes("float").dropna()
    corr_matrix = df_corr.corr()
    fig, ax = plt.subplots(figsize=(9, 6))
    sns.heatmap(corr_matrix, cmap="coolwarm", ax=ax)
    ax.set_title("Matriz de correlaci√≥n", fontsize=12)
    st.pyplot(fig)

with tab4:
    st.header("ü§ñ Predicci√≥n de Ox√≠geno Disuelto con IA")
    st.markdown("Modelo entrenado con Random Forest sobre par√°metros como pH, temperatura, turbidez, etc.")

    # Inputs
    pH = st.slider("pH", 5.0, 9.0, 7.0)
    temp = st.slider("Temperatura (¬∞C)", 0.0, 40.0, 25.0)
    turb = st.slider("Turbiedad (UNT)", 0.0, 100.0, 10.0)
    dbo = st.slider("DBO (mg O2/l)", 0.0, 20.0, 5.0)
    dureza = st.slider("Dureza total (mg CaCO3/l)", 0.0, 1000.0, 200.0)
    solidos = st.slider("S√≥lidos disueltos (mg/l)", 0.0, 1000.0, 300.0)

    X_features = ['pH', 'TEMPERATURA (¬∞C)', 'TURBIEDAD (UNT)',
                  'DEMANDA BIOQUIMICA DE OXIGENO (mg O2/l)',
                  'DUREZA TOTAL (mg CaCO3/l)', 'SOLIDOS DISUELTOS (mg SD/l)']
    df_model = df[X_features + ['OXIGENO DISUELTO (mg O2/l)']].dropna()
    X = df_model[X_features]
    y = df_model['OXIGENO DISUELTO (mg O2/l)']

    model = RandomForestRegressor()
    model.fit(X, y)

    pred_input = np.array([[pH, temp, turb, dbo, dureza, solidos]])
    pred_avg_input = np.array([[df_model[col].mean() for col in X_features]])

    prediction_user = model.predict(pred_input)[0]
    prediction_avg = model.predict(pred_avg_input)[0]

    st.success(f"ü§ñ Predicci√≥n con tus valores: **{prediction_user:.2f} mg O2/l**")
    st.info(f"üìò Predicci√≥n con valores promedio hist√≥ricos: **{prediction_avg:.2f} mg O2/l**")

    st.subheader("üìä Comparaci√≥n con valores hist√≥ricos")
    st.markdown(f"""
- **Valor m√≠nimo registrado:** `{y.min():.2f} mg O2/l`  
- **Valor m√°ximo registrado:** `{y.max():.2f} mg O2/l`  
- **Promedio hist√≥rico:** `{y.mean():.2f} mg O2/l`

üîπ Esta predicci√≥n **estima el valor t√≠pico de ox√≠geno disuelto bajo las condiciones seleccionadas**.  
üö´ **No representa una proyecci√≥n futura**, sino una inferencia contextual basada en el comportamiento pasado del r√≠o.  
üß† √ötil para **simular escenarios de intervenci√≥n ambiental o monitoreo preventivo**.

üßæ **Resultado respecto al promedio:** {"üîª Bajo" if prediction_user < y.mean() else "üî∫ Alto"}
""")

    fig, ax = plt.subplots(figsize=(7, 3))
    sns.histplot(y, kde=True, color="skyblue", ax=ax)
    ax.axvline(prediction_user, color="red", linestyle="--", label="Tu predicci√≥n")
    ax.axvline(prediction_avg, color="green", linestyle=":", label="Predicci√≥n promedio")
    ax.set_title("Distribuci√≥n hist√≥rica del ox√≠geno disuelto")
    ax.set_xlabel("OXIGENO DISUELTO (mg O2/l)")
    ax.legend()
    st.pyplot(fig)

    st.subheader("üìå Importancia de los par√°metros")
    importance_df = pd.DataFrame({
        "Par√°metro": X.columns,
        "Importancia": model.feature_importances_
    }).sort_values(by="Importancia", ascending=False)
    st.bar_chart(importance_df.set_index("Par√°metro"))

    with st.expander("‚ÑπÔ∏è Interpretaci√≥n del resultado"):
        if prediction_user < 4:
            st.warning("‚ö†Ô∏è Niveles bajos pueden indicar contaminaci√≥n org√°nica o escasa oxigenaci√≥n.")
        elif prediction_user > 8:
            st.success("‚úÖ Niveles altos sugieren buena salud acu√°tica.")
        else:
            st.info("üü° Nivel moderado, monitoreo recomendado.")

with tab5:
    st.header("üìò Informaci√≥n del Proyecto")
    st.markdown(f"""
- **Objetivo:** Evaluar la calidad del agua del R√≠o Cauca mediante an√°lisis de datos p√∫blicos.
- **Rango de datos:** desde {min_fecha} hasta {max_fecha}.
- **Fuente de datos:** [Calidad del agua del R√≠o Cauca - datos.gov.co](https://www.datos.gov.co/Ambiente-y-Desarrollo-Sostenible/Calidad-del-agua-del-Rio-Cauca/d3ft-wu2b/about_data)
- **Autor:** [Pablo Andr√©s Mu√±oz](https://pabandres85.github.io/PortafolioPablo/)
""")
